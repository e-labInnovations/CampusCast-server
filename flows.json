[
    {
        "id": "fd8e8b6fa29d6f79",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ce080af1180e0bb",
        "type": "websocket-listener",
        "path": "/",
        "wholemsg": "false"
    },
    {
        "id": "7540fc1a.916874",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Fetch Announcements",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\n// firestore.collection('announcements')\n//     .onSnapshot(snap => {\n//         snap.docChanges().forEach(change => {\n//             var message = change.doc.data()\n//             node.send(message);\n//         })\n//     })\n\n// firestore.collection('test_announcements').get().then((querySnapshot) => {\n//     querySnapshot.forEach((doc) => {\n//         console.log(doc.id, ' => ', doc.data());\n//     });\n// }).catch((error) => {\n//     console.error('Error getting documents: ', error);\n// });\n\nfirestore.collection('announcements')\n    .where('isSend', '==', false)\n    .onSnapshot(snap => {\n        snap.docChanges().forEach(change => {\n            if (change.type === \"added\") {\n                msg.payload = change.doc\n                node.send(msg);\n            }\n        })\n    })\n\n// const db = firebaseAdmin.firestore();\n// const announcementsRef = db.collection('announcements');\n\n// db.collection(\"announcements\").doc(\"k6UIbKUA0UbNbcJDDQi3\")\n//     .onSnapshot((doc) => {\n//         console.log(\"Current data: \", doc.data());\n//     });\n\n// const firestore = firebaseAdmin.firestore();\n\n// firestore.listCollections().then(collections => {\n//     collections.forEach(collection => {\n//         console.log('Collection:', collection.id);\n//     });\n// }).catch(error => {\n//     console.error('Error listing collections:', error);\n// });\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "80b7665eaf40adb9"
            ]
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "2a4e826b.c9ae4e",
        "type": "inject",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "7540fc1a.916874",
                "65991308f1ab1957"
            ]
        ]
    },
    {
        "id": "5501dffded061074",
        "type": "inject",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "479444429fceb3aa"
            ]
        ]
    },
    {
        "id": "479444429fceb3aa",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "function 1",
        "func": "msg.payload = Buffer.from(JSON.stringify({\n    \"type\": \"service_account\",\n    \"project_id\": \"campuscast-elabins\",\n    \"private_key_id\": \"1fdc6851c8daaaa3e2b9f36fd4d93bafec26f68b\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC9Cx5e6ENKcePw\\nKpg0Of41R0auZCb5h7GSIAtIbhBhfgDRSk/dyXDebl6rdr5t5vjDcgoem8qP9OF2\\ngDpdQVzuKb+3bcOwgcxoqz+47uuQdiPIv7pPhYMY5ofPAtb2GWZEWoF9b2P80mJ8\\nMS095lG62bx3sYKXxPlx99yz6u5p5VHKp5afaevLR54U7giv4mM7QUpY5rtoYfnE\\ncWNpE3CiO+vibuoJFKXhSCB9Qg51jypFeALqAyfCKJWrKAOfWeoW8LJ6SWD+iq3V\\nr+79XtXyMz83DNGjIuw5WV9b3XU/UgqVPdVArnVxiTz1k9rlO8ypa1+0yuSYD3kR\\nxqpujDBpAgMBAAECggEAKqsvCnRptcyhimSO0KDzVgK1uyh7XJCKXaVSbqF7HIo0\\ndIjNoI12ZpoqT5DAeC1tIi4kBxcaYCZBWn4kTkaxy0bMkUIa7ITLhqd6fUseC9AC\\nkS3nR0onFjB4YFrveoIuoUh9WDrTam3xET+HSuSot2AsaCa+h3OL6vOrUse40tku\\nZVMC2KMusauM2DDGRyEAcwYit3A0T1obUDgZ2vq3+W9QvGcCKDpFH9jBMm9QdQJ5\\nj1iLwD+vXetw1h5m6GdymA1tzj4KRb9AOhdF6p7Jpx9AX+7ds+5uNYSG9jYAojST\\nqN4J8TfJvElzNTE0yXPhXPWxbTh1Z9HlW5m6xGCZlQKBgQDta4vteZphAI4LzjDW\\nHNAyIuwb7F0SrAVLRsjb3mgLAu+MHuGzoCkqnB0z84Lvyf9MVYAzrrua+rAhgK/o\\nW2i9r4q8KNCLRZwBiCD6J76U7t+lszoMum3w7uZljp8FiJzNKGRfzhOXMtZesVjn\\nbQSw6XIjK/j7FJK36jQsIKCyxQKBgQDL1mXoCVQJydwTYKqPJMBL9nVZhjEC+6/8\\nu0mp0eJH0odfcbtH8hzqVgfN5fERXVe9wCp/hr63Fkuw1i3CB0x8dXNeUENjYyTw\\nBoZDnoPCNfrHduZjTf14n9bE2UtHx66OxTdz8jxBTQeMX+wEYSW24NMMMM1DYpL1\\ntsxURibRVQKBgQCHQbW93IEusfo6j4US9edGKM8KOWXstUNu1yym1dXAMDP4R7+d\\nbakGNVoNtrTpltJy0mLvDqSibh7Zd06/uRO6vL704uur7EQsOzlOSkYw4sVWyPxR\\nNAReNjvbr5y4slNiLZjBW82dXcDywWY8scbyYow7rVly8Q2E6VA/s3bZYQKBgQDL\\ny0A5nFH0M2ifyw7bbKABkphC+GI6HE8YfFuquJfmvPrxlvDqfosgUwEcf1/kv5FA\\nukcDF0HIJTdpxska61cyO+8rhU3KqU492BgWtP4Ahx2CnUK8WDYqiowcZS/ZxS+l\\nuFG3z6EknJIGa8S5oDMnw2HeF1CxpXVOywNA4p5evQKBgHw6pQbWk38KdjRcO4J7\\nPblL1LoqVH9XaET75k57qx+Ayef2AiXH8yzlqy5BlW6wcie3RsC5zkXsbhfQAXWm\\nKn8EC6TroEzvdoCVSkJFMjopyWkOGDCM6DbuXmlfcUwfUmIwrUBiO0Y6tYjm1dcI\\nf2FiIkGF/OMWsHxyhSWJb+Za\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"firebase-adminsdk-pwxdv@campuscast-elabins.iam.gserviceaccount.com\",\n    \"client_id\": \"102631291301532557003\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-pwxdv%40campuscast-elabins.iam.gserviceaccount.com\"\n})).toString('base64')\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\nconsole.log(JSON.parse(Buffer.from(configData, 'base64').toString('ascii')))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 380,
        "wires": [
            [
                "0feb7ae52911d870"
            ]
        ]
    },
    {
        "id": "0feb7ae52911d870",
        "type": "debug",
        "z": "fd8e8b6fa29d6f79",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 380,
        "wires": []
    },
    {
        "id": "80b7665eaf40adb9",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Update firebase",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\n\nconst docRef = msg.payload.ref;\nconst data = { ...msg.payload.data(), id: msg.payload.id };\ndocRef.update({ isSend: true });\n\n\nconst doStuffs = async () => {\n    const getPublisher = async (uid) => {\n        try {\n            const snapshot = await firestore.collection('users').doc(uid).get();\n            if (snapshot.exists) {\n                const userData = snapshot.data();\n                return userData;\n            } else {\n                // Document with the given UID does not exist\n                return null;\n            }\n        } catch (error) {\n            console.error('Error fetching getPublisher:', error);\n            return null;\n        }\n    };\n\n    const announcementPublisher = await getPublisher(data.publishedBy);\n\n    // Update the note field of all relevant documents in the groups collection\n    const batch = firestore.batch();\n    const announcementTime = data.announcementTime.toDate().toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n\n    data.recipients.groupsIds.forEach(groupId => {\n        const groupRef = firestore.collection('groups').doc(groupId);\n        batch.update(groupRef, {\n            message: `${announcementPublisher ? announcementPublisher.displayName : 'UNKNOWN'}: ${data.note}`,\n            time: announcementTime,\n            lastAnnouncementSend: false\n        });\n    });\n\n\n    const getClassroomsIds = async () => {\n        const classroomIdsArray = data.recipients.classroomIds;\n        const groupIdsArray = data.recipients.groupsIds;\n\n        const groupsRef = firestore.collection('groups')\n        if (groupIdsArray.length > 0) {\n            return groupsRef.where(firebaseAdmin.firestore.FieldPath.documentId(), 'in', groupIdsArray).get()\n                .then(snapshot => {\n                    snapshot.forEach(doc => {\n                        doc.data().classroomIds.forEach(classroomId => {\n                            classroomIdsArray.push(classroomId)\n                        })\n                    });\n\n                    const classroomIds = Array.from(new Set(classroomIdsArray))\n                    return classroomIds\n\n                })\n                .catch(error => {\n                    console.error('Error fetching classroom documents:', error);\n                    return classroomIdsArray;\n                });\n        } else {\n            return classroomIdsArray\n        }\n    }\n\n    const fetchClassrooms = async (_classroomsIds) => {\n        const classroomRef = firestore.collection('devices')\n        const _classroomsItems = []\n        return classroomRef.where(firebaseAdmin.firestore.FieldPath.documentId(), 'in', _classroomsIds).get()\n            .then(snapshot => {\n                snapshot.forEach(classroomDoc => {\n                    _classroomsItems.push({ ...classroomDoc.data(), id: classroomDoc.id })\n                });\n\n                return _classroomsItems\n\n            })\n            .catch(error => {\n                console.error('Error fetching classroom documents:', error);\n                return _classroomsItems;\n            });\n    }\n\n    const classroomsIdsArray = await getClassroomsIds();\n    classroomsIdsArray.forEach(classroomId => {\n        const classroomRef = firestore.collection('devices').doc(classroomId);\n        batch.update(classroomRef, {\n            message: `${announcementPublisher ? announcementPublisher.displayName : 'UNKNOWN'}: ${data.note}`,\n            time: announcementTime,\n            lastAnnouncementSend: false\n        });\n    });\n\n    const classroomsArray = await fetchClassrooms(classroomsIdsArray)\n    batch.commit().then(() => {\n        msg.payload = { announcement: data, recipients: classroomsArray };\n        node.send(msg);\n    });\n\n}\ndoStuffs()",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            [
                "e3097dcf95be2c49"
            ]
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "04c3192ad21e0ec4",
        "type": "websocket in",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "server": "3ce080af1180e0bb",
        "client": "",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "d4bab76172439c27",
                "fd05e9f4de9743a7",
                "80d474cda2178377"
            ]
        ]
    },
    {
        "id": "d4bab76172439c27",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Connected",
        "func": "let received_msg = JSON.parse(msg.payload)\nif (received_msg.command == 'connected') {\n    msg.payload = {\n        classroom_code: received_msg.classroom_code,\n        websocket_id: msg._session.id\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "0e4391c1834b5817"
            ]
        ]
    },
    {
        "id": "0e4391c1834b5817",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Update Devices",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\nconst websocket_id = msg.payload.websocket_id\n\nfirestore.collection('devices')\n    .where('classroomCode', '==', msg.payload.classroom_code)\n    .get()\n    .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n            // console.log(doc.id, ' => ', doc.data());\n\n            const deviceRef = firestore.collection('devices').doc(doc.id);\n            deviceRef.update({ websocketId: websocket_id })\n                .then(() => {\n                    console.log('websocketId updated successfully');\n                })\n                .catch((error) => {\n                    console.error('Error updating websocketId: ', error);\n                });\n        });\n    })\n    .catch((error) => {\n        console.error('Error getting documents: ', error);\n    });\n\nmsg.payload = {\n    command: 'connected_ack',\n    introURL: 'https://firebasestorage.googleapis.com/v0/b/campuscast-elabins.appspot.com/o/intro.mp3?alt=media&token=756fe61f-8d57-453b-be03-23db5cbedf18',\n    outroURL: 'https://firebasestorage.googleapis.com/v0/b/campuscast-elabins.appspot.com/o/outro.mp3?alt=media&token=75b04d5d-ecdf-4eea-9d87-a7aae01ebc4e'\n}\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "98b404f08dec8afa"
            ]
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "e3097dcf95be2c49",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Send WS Message",
        "func": "msg.payload.recipients.map(recipient => {\n    // console.log(recipient)\n    const ws_msg = {\n        command: 'anncmnt',\n        audioUrl: msg.payload.announcement.audioUrl,\n        id: msg.payload.announcement.id,\n        recipient: recipient.classroomCode\n    }\n    node.send({\n        payload: ws_msg,\n        _session: {\n            id: recipient.websocketId\n        }\n    });\n})\n// node.warn(msg.payload.recipients);\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 60,
        "wires": [
            [
                "98b404f08dec8afa"
            ]
        ]
    },
    {
        "id": "fd05e9f4de9743a7",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "ACK",
        "func": "let received_msg = JSON.parse(msg.payload)\nif (received_msg.command == 'ack') {\n    msg.payload = {\n        classroom_code: received_msg.classroom_code,\n        // websocket_id: msg._session.id\n        msg_id: received_msg.msg_id\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "07fa6b08b17df0b7",
                "84fb005371faa47c"
            ]
        ]
    },
    {
        "id": "07fa6b08b17df0b7",
        "type": "debug",
        "z": "fd8e8b6fa29d6f79",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 300,
        "wires": []
    },
    {
        "id": "80d474cda2178377",
        "type": "debug",
        "z": "fd8e8b6fa29d6f79",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 340,
        "wires": []
    },
    {
        "id": "84fb005371faa47c",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Update Devices",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\n\nfirestore.collection('devices')\n    .where('classroomCode', '==', msg.payload.classroom_code)\n    .get()\n    .then((querySnapshot) => {\n        node.warn(querySnapshot.length);\n        querySnapshot.forEach((doc) => {\n            console.log(doc.id, ' => ', doc.data());\n\n            //add `doc.id` to playedInClassrooms\n            const announcementRef = firestore.collection('announcements').doc(msg.payload.msg_id);\n            announcementRef.update({\n                playedInClassrooms: firebaseAdmin.firestore.FieldValue.arrayUnion(doc.id)\n            })\n                .then(() => {\n                    console.log('Document updated successfully with added classroom.');\n                })\n                .catch((error) => {\n                    console.error('Error updating document:', error);\n                });\n        });\n    })\n    .catch((error) => {\n        console.error('Error getting documents: ', error);\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            []
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "65991308f1ab1957",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Fetch Exam Schedules",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\n\nfirestore.collection('exam_schedules')\n    .where('endAt', '>', firebaseAdmin.firestore.Timestamp.now())\n    .onSnapshot(snapshot => {\n        let examSchedules = [];\n\n        snapshot.forEach(doc => {\n            examSchedules.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n\n        // Process the exam schedules here\n        global.set('examSchedules', examSchedules)\n        console.log(examSchedules);\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            []
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "fd6c9ccf423ca91c",
        "type": "inject",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "f611ad551f47b1fe"
            ]
        ]
    },
    {
        "id": "f611ad551f47b1fe",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Check Exam Schedules",
        "func": "const examSchedules = global.get('examSchedules') || []\nvar textList = global.get('textList') || []\n\n// Function to check if an exam schedule is expired or not\nfunction isScheduleExpired(schedule) {\n    const currentDateTime = new Date();\n    const endDateTime = new Date(schedule.endAt._seconds * 1000); // Convert from seconds to milliseconds\n\n    // Remove the seconds from the currentDateTime and endDateTime\n    const currentDateTimeWithoutSeconds = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), currentDateTime.getHours(), currentDateTime.getMinutes());\n    const endDateTimeWithoutSeconds = new Date(endDateTime.getFullYear(), endDateTime.getMonth(), endDateTime.getDate(), endDateTime.getHours(), endDateTime.getMinutes());\n\n    // Check if the currentDateTime is greater than the endDateTime without seconds\n    return currentDateTimeWithoutSeconds > endDateTimeWithoutSeconds;\n}\n\nfunction isWithinLastMinute(schedule) {\n    const startDateTime = new Date(schedule.startAt._seconds * 1000); // Convert from seconds to milliseconds\n    const currentDateTime = new Date();\n    const oneMinuteAgo = new Date(currentDateTime.getTime() - 60000); // Subtract 60,000 milliseconds (1 minute) from the current date and time\n\n    return startDateTime > oneMinuteAgo && startDateTime <= currentDateTime;\n}\n\nfunction isEnding(schedule) {\n    const endDateTime = new Date(schedule.endAt._seconds * 1000); // Convert from seconds to milliseconds\n    const currentDateTime = new Date();\n\n    // Check if the year, month, date, hour, and minute are equal\n    if (\n        endDateTime.getFullYear() === currentDateTime.getFullYear() &&\n        endDateTime.getMonth() === currentDateTime.getMonth() &&\n        endDateTime.getDate() === currentDateTime.getDate() &&\n        endDateTime.getHours() === currentDateTime.getHours() &&\n        endDateTime.getMinutes() === currentDateTime.getMinutes()\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isEndSoon(schedule) {\n    const endDateTime = new Date(schedule.endAt._seconds * 1000); // Convert from seconds to milliseconds\n    const currentDateTime = new Date();\n\n    // Calculate the end time minus 10 minutes\n    const endMinus10Minutes = new Date(endDateTime.getTime() - 10 * 60 * 1000);\n\n    // Remove the seconds from the endMinus10Minutes and currentDateTime\n    const endMinus10MinutesWithoutSeconds = new Date(endMinus10Minutes.getFullYear(), endMinus10Minutes.getMonth(), endMinus10Minutes.getDate(), endMinus10Minutes.getHours(), endMinus10Minutes.getMinutes());\n    const currentDateTimeWithoutSeconds = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate(), currentDateTime.getHours(), currentDateTime.getMinutes());\n\n    // Check if the date and time without seconds are equal\n    return endMinus10MinutesWithoutSeconds.getTime() === currentDateTimeWithoutSeconds.getTime();\n}\n\nfunction getIntervalMinutes(schedule) {\n    const currentDateTime = new Date();\n    currentDateTime.setSeconds(0); // Set seconds to 0\n\n    const startDateTime = new Date(schedule.startAt._seconds * 1000); // Convert from seconds to milliseconds\n    startDateTime.setSeconds(0); // Set seconds to 0\n\n    const minutesDifference = Math.floor((currentDateTime.getTime() - startDateTime.getTime()) / (1000 * 60));\n    const intervalMinutes = 30; // Interval duration in minutes\n\n    if (minutesDifference >= 0 && minutesDifference % intervalMinutes === 0) {\n        return minutesDifference;\n    }\n\n    return -1; // Return -1 if not within an interval\n}\nfunction convertMinutesToHours(minutes) {\n    if (minutes < 60) {\n        return `${minutes} minutes`;\n    }\n\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n\n    if (remainingMinutes === 0) {\n        return `${hours} hours`;\n    }\n\n    return `${hours} hours ${remainingMinutes} minutes`;\n}\n\nfunction getCurrentTime() {\n    const currentDateTime = new Date();\n    let hours = currentDateTime.getHours();\n    const minutes = currentDateTime.getMinutes();\n    let meridiem = 'AM';\n\n    // Convert hours to 12-hour format and determine the meridiem\n    if (hours === 0) {\n        hours = 12;\n    } else if (hours > 12) {\n        hours -= 12;\n        meridiem = 'PM';\n    }\n\n    return `${hours} ${meridiem} ${minutes} minutes`;\n}\n\nfunction notifyClassrooms(schedule, text) {\n    let textObj = {\n        id: schedule.id,\n        text: text\n    }\n    textList = textList.filter(item => item.id != schedule.id)\n    textList.push(textObj)\n    global.set('textList', textList)\n\n    node.send({\n        classsroomList: schedule.classroomIds,\n        scheduleId: schedule.id\n    });\n}\n\nexamSchedules.forEach(schedule => {\n    if (!isScheduleExpired(schedule)) {\n        console.log(`The exam schedule \"${schedule.title}\" with ID ${schedule.id} is still active.`);\n        if (isWithinLastMinute(schedule)) {\n            console.log(`within one minutes0`);\n\n            notifyClassrooms(schedule, 'students can start writing the exam')\n        } else {\n            if (isEndSoon(schedule)) {\n                console.log(`ending soon`);\n\n                notifyClassrooms(schedule, 'Only 10 minutes left for the exam! please tie your papers')            \n            } else {\n                let intervalTime = getIntervalMinutes(schedule) \n                if (intervalTime != -1) {\n                    console.log(`Interval:`, intervalTime);\n\n                    notifyClassrooms(schedule, 'time is ' + getCurrentTime())\n                } else {\n                    if (isEnding(schedule)) {\n                        console.log(`ending`);\n\n                        notifyClassrooms(schedule, 'exam is over.Please stop writing and submit your papers')\n                    } else {\n                        //console.log(`not ending`);\n                    }\n                }\n            }\n        }\n\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "249d3ee6f34e1be8"
            ]
        ]
    },
    {
        "id": "a72ccdedca532396",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "text-to-speech",
        "func": "const { getAudioBuffer } = global.get('simpleTtsMp3');\n\nif (msg.payload.id) {\n    const textList = global.get('textList') || []\n    const textItem = textList.find(item => item.id == msg.payload.id)\n    // console.log(textList, textItem)\n    const playText = textItem ? textItem.text:\"Item not found\"\n    getAudioBuffer(playText, 'en')\n        .then(buffer => {\n            // Do something with the buffer\n            msg.payload = buffer\n            node.send(msg);\n        });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f55e09aade3c1d1e"
            ]
        ]
    },
    {
        "id": "30adf8481bafa3e0",
        "type": "http in",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "url": "/examschedule",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "a72ccdedca532396",
                "01d3a5729ae1868b"
            ]
        ]
    },
    {
        "id": "f55e09aade3c1d1e",
        "type": "http response",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Type": "audio/mpeg",
            "Content-Disposition": " inline; filename=\"audio.mp3\""
        },
        "x": 470,
        "y": 420,
        "wires": []
    },
    {
        "id": "01d3a5729ae1868b",
        "type": "debug",
        "z": "fd8e8b6fa29d6f79",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 480,
        "wires": []
    },
    {
        "id": "249d3ee6f34e1be8",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Update firebase",
        "func": "var firebaseAdmin = global.get('firebaseAdmin');\nconst configData = 'eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6ImNhbXB1c2Nhc3QtZWxhYmlucyIsInByaXZhdGVfa2V5X2lkIjoiMWZkYzY4NTFjOGRhYWFhM2UyYjlmMzZmZDRkOTNiYWZlYzI2ZjY4YiIsInByaXZhdGVfa2V5IjoiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUM5Q3g1ZTZFTktjZVB3XG5LcGcwT2Y0MVIwYXVaQ2I1aDdHU0lBdEliaEJoZmdEUlNrL2R5WERlYmw2cmRyNXQ1dmpEY2dvZW04cVA5T0YyXG5nRHBkUVZ6dUtiKzNiY093Z2N4b3F6KzQ3dXVRZGlQSXY3cFBoWU1ZNW9mUEF0YjJHV1pFV29GOWIyUDgwbUo4XG5NUzA5NWxHNjJieDNzWUtYeFBseDk5eXo2dTVwNVZIS3A1YWZhZXZMUjU0VTdnaXY0bU03UVVwWTVydG9ZZm5FXG5jV05wRTNDaU8rdmlidW9KRktYaFNDQjlRZzUxanlwRmVBTHFBeWZDS0pXcktBT2ZXZW9XOExKNlNXRCtpcTNWXG5yKzc5WHRYeU16ODNETkdqSXV3NVdWOWIzWFUvVWdxVlBkVkFyblZ4aVR6MWs5cmxPOHlwYTErMHl1U1lEM2tSXG54cXB1akRCcEFnTUJBQUVDZ2dFQUtxc3ZDblJwdGN5aGltU08wS0R6VmdLMXV5aDdYSkNLWGFWU2JxRjdISW8wXG5kSWpOb0kxMlpwb3FUNURBZUMxdElpNGtCeGNhWUNaQlduNGtUa2F4eTBiTWtVSWE3SVRMaHFkNmZVc2VDOUFDXG5rUzNuUjBvbkZqQjRZRnJ2ZW9JdW9VaDlXRHJUYW0zeEVUK0hTdVNvdDJBc2FDYStoM09MNnZPclVzZTQwdGt1XG5aVk1DMktNdXNhdU0yRERHUnlFQWN3WWl0M0EwVDFvYlVEZ1oydnEzK1c5UXZHY0NLRHBGSDlqQk1tOVFkUUo1XG5qMWlMd0QrdlhldHcxaDVtNkdkeW1BMXR6ajRLUmI5QU9oZEY2cDdKcHg5QVgrN2RzKzV1TllTRzlqWUFvalNUXG5xTjRKOFRmSnZFbHpOVEUweVhQaFhQV3hiVGgxWjlIbFc1bTZ4R0NabFFLQmdRRHRhNHZ0ZVpwaEFJNEx6akRXXG5ITkF5SXV3YjdGMFNyQVZMUnNqYjNtZ0xBdStNSHVHem9Da3FuQjB6ODRMdnlmOU1WWUF6cnJ1YStyQWhnSy9vXG5XMmk5cjRxOEtOQ0xSWndCaUNENko3NlU3dCtsc3pvTXVtM3c3dVpsanA4RmlKek5LR1JmemhPWE10WmVzVmpuXG5iUVN3NlhJaksvajdGSkszNmpRc0lLQ3l4UUtCZ1FETDFtWG9DVlFKeWR3VFlLcVBKTUJMOW5WWmhqRUMrNi84XG51MG1wMGVKSDBvZGZjYnRIOGh6cVZnZk41ZkVSWFZlOXdDcC9ocjYzRmt1dzFpM0NCMHg4ZFhOZVVFTmpZeVR3XG5Cb1pEbm9QQ05mckhkdVpqVGYxNG45YkUyVXRIeDY2T3hUZHo4anhCVFFlTVgrd0VZU1cyNE5NTU1NMURZcEwxXG50c3hVUmliUlZRS0JnUUNIUWJXOTNJRXVzZm82ajRVUzllZEdLTThLT1dYc3RVTnUxeXltMWRYQU1EUDRSNytkXG5iYWtHTlZvTnRyVHBsdEp5MG1MdkRxU2liaDdaZDA2L3VSTzZ2TDcwNHV1cjdFUXNPemxPU2tZdzRzVld5UHhSXG5OQVJlTmp2YnI1eTRzbE5pTFpqQlc4MmRYY0R5d1dZOHNjYnlZb3c3clZseThRMkU2VkEvczNiWllRS0JnUURMXG55MEE1bkZIME0yaWZ5dzdiYktBQmtwaEMrR0k2SEU4WWZGdXF1SmZtdlByeGx2RHFmb3NnVXdFY2YxL2t2NUZBXG51a2NERjBISUpUZHB4c2thNjFjeU8rOHJoVTNLcVU0OTJCZ1d0UDRBaHgyQ25VSzhXRFlxaW93Y1pTL1p4UytsXG51RkczejZFa25KSUdhOFM1b0RNbncySGVGMUN4cFhWT3l3TkE0cDVldlFLQmdIdzZwUWJXazM4S2RqUmNPNEo3XG5QYmxMMUxvcVZIOVhhRVQ3NWs1N3F4K0F5ZWYyQWlYSDh5emxxeTVCbFc2d2NpZTNSc0M1emtYc2JoZlFBWFdtXG5LbjhFQzZUcm9FenZkb0NWU2tKRk1qb3B5V2tPR0RDTTZEYnVYbWxmY1V3ZlVtSXdyVUJpTzBZNnRZam0xZGNJXG5mMkZpSWtHRi9PTVdzSHh5aFNXSmIrWmFcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsImNsaWVudF9lbWFpbCI6ImZpcmViYXNlLWFkbWluc2RrLXB3eGR2QGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImNsaWVudF9pZCI6IjEwMjYzMTI5MTMwMTUzMjU1NzAwMyIsImF1dGhfdXJpIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsImNsaWVudF94NTA5X2NlcnRfdXJsIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9maXJlYmFzZS1hZG1pbnNkay1wd3hkdiU0MGNhbXB1c2Nhc3QtZWxhYmlucy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSJ9'\n\nif (firebaseAdmin.apps.length === 0) {\n    firebaseAdmin.initializeApp({\n        credential: firebaseAdmin.credential.cert(\n            JSON.parse(Buffer.from(configData, 'base64').toString('ascii'))),\n    });\n}\n\nconst firestore = firebaseAdmin.firestore()\n\nconst doStuffs = async () => {\n    const fetchClassrooms = async (_classroomsIds) => {\n        const classroomRef = firestore.collection('devices')\n        const _classroomsItems = []\n        return classroomRef.where(firebaseAdmin.firestore.FieldPath.documentId(), 'in', _classroomsIds).get()\n            .then(snapshot => {\n                snapshot.forEach(classroomDoc => {\n                    _classroomsItems.push({ ...classroomDoc.data(), id: classroomDoc.id })\n                });\n\n                return _classroomsItems\n\n            })\n            .catch(error => {\n                console.error('Error fetching classroom documents:', error);\n                return _classroomsItems;\n            });\n    }\n\n    const classroomsIdsArray = msg.classsroomList\n\n    const classroomsArray = await fetchClassrooms(classroomsIdsArray)\n    msg.payload = { scheduleId: msg.scheduleId, recipients: classroomsArray };\n    node.send(msg);\n\n}\ndoStuffs()",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [
            [
                "580ebb10873aa13e"
            ]
        ],
        "outputLabels": [
            "1"
        ]
    },
    {
        "id": "580ebb10873aa13e",
        "type": "function",
        "z": "fd8e8b6fa29d6f79",
        "name": "Send WS Message",
        "func": "msg.payload.recipients.map(recipient => {\n    // console.log(recipient)\n    const ws_msg = {\n        command: 'examschedule',\n        audioUrl: msg.payload.scheduleId,\n        id: msg.payload.scheduleId,\n        recipient: recipient.classroomCode\n    }\n    node.send({\n        payload: ws_msg,\n        _session: {\n            id: recipient.websocketId\n        }\n    });\n})\n// node.warn(msg.payload.recipients);\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "98b404f08dec8afa"
            ]
        ]
    },
    {
        "id": "98b404f08dec8afa",
        "type": "websocket out",
        "z": "fd8e8b6fa29d6f79",
        "name": "",
        "server": "3ce080af1180e0bb",
        "client": "",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "efd09da01999954f",
        "type": "debug",
        "z": "fd8e8b6fa29d6f79",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 280,
        "wires": []
    }
]